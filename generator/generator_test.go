package generator_test

import (
	"fmt"
	"sort"

	"github.com/steffnova/go-check"
	"github.com/steffnova/go-check/constraints"
	"github.com/steffnova/go-check/generator"
)

func ExampleGenerator_Map_evenInt() {
	// Streamer uses Int generator and Map combinator to generate even int values.
	check.Stream(check.Streamer(
		func(n int) {
			fmt.Printf("%d\n", n)
		},
		generator.Int(constraints.Int{
			Min: 0,
			Max: 100,
		},
		// Map combinator uses a mapper to map generated int
		// value to it's multiple of 2
		).Map(func(n int) int {
			return n * 2
		}),
	), check.Config{Seed: 0, Iterations: 10})

	// Output:
	// 62
	// 32
	// 160
	// 172
	// 138
	// 44
	// 168
	// 6
	// 128
	// 60
}

func ExampleGenerator_Map_orderedIntSlice() {
	// Streamer uses Slice generator and Map combinator to generate ordered int slices.
	check.Stream(check.Streamer(
		func(n []int) {
			fmt.Printf("%d\n", n)
		},

		generator.Slice(
			generator.Int(constraints.Int{
				Min: 0,
				Max: 10000,
			}),
			constraints.Length{Min: 0, Max: 10},
		// Map combinator uses a mapper to sort int slice
		).Map(func(ns []int) []int {
			sort.SliceStable(ns, func(i, j int) bool {
				return ns[i] < ns[j]
			})
			return ns
		}),
	), check.Config{Seed: 0, Iterations: 10})

	// Output:
	// [259 1069 1984 5150 5910]
	// [3323]
	// [2140 3257 3378 5063 5836 8213 8701 9832]
	// [1247 3422 4175 4605 4904 5523 5629 5705 9029 9609]
	// [1943 3465 4132 8913]
	// [30 2361 3384 6926]
	// []
	// [271 1007 2281 8190 8477 9452]
	// [3746 5588 8797 9599]
	// [19 697 3795 5496 6269 6795 7065 7552]
}

func ExampleGenerator_Filter_evenInt() {
	// Streamer uses Int generator and Filter combinator to generate even int values.
	check.Stream(check.Streamer(
		func(n int) {
			fmt.Printf("%d\n", n)
		},
		generator.Int(constraints.Int{
			Min: 0,
			Max: 100,
		},
		// Filter combinator uses a predicate to filter values
		// generated by it's source generator
		).Filter(func(n int) bool {
			return n%2 == 0
		}),
	), check.Config{Seed: 0, Iterations: 10})

	// Output:
	// 16
	// 80
	// 86
	// 22
	// 84
	// 64
	// 30
	// 40
	// 62
	// 92
}

func ExampleGenerator_Bind_stringWithRepeatingCharacter() {
	// Streamer uses Rune generator and Binder combinator to generate string
	// with repeating single character.
	check.Stream(check.Streamer(
		func(s string) {
			fmt.Printf("%s\n", s)
		},
		generator.Rune(constraints.Rune{
			MinCodePoint: 'a',
			MaxCodePoint: 'z',
		},
		// Bind combinator uses a binder to bind source generator (Rune)
		// and String generator. Rune generated by source generator is used
		// for defining string constraint in String generator.
		).Bind(func(c rune) generator.Generator {
			return generator.String(constraints.String{
				Rune: constraints.Rune{
					MinCodePoint: c,
					MaxCodePoint: c,
				},
				Length: constraints.Length{
					Min: 10,
					Max: 10,
				},
			})
		}),
	), check.Config{Seed: 0, Iterations: 10})

	// Output:
	// vvvvvvvvvv
	// iiiiiiiiii
	// pppppppppp
	// wwwwwwwwww
	// aaaaaaaaaa
	// eeeeeeeeee
	// vvvvvvvvvv
	// aaaaaaaaaa
	// llllllllll
	// ssssssssss
}
